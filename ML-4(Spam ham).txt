import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report,accuracy_score
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB,GaussianNB,BernoulliNB

df = pd.read_csv('SMSSpamCollection',sep='\t',names=['label','text'])
df.head()

df['spam']=df['label'].apply(lambda x:1 if x=='spam' else 0)
X = df['text'] 
y = df['spam']
df.head()

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
vectorizer = CountVectorizer()
X_train_count = vectorizer.fit_transform(X_train)
X_test_count = vectorizer.transform(X_test)

base_models = {
    'Gaussian Naive Bayes': GaussianNB(),
    'Multinomial Naive Bayes': MultinomialNB(),
    'Bernoulli Naive Bayes': BernoulliNB()
}

param_grids = {
    'Gaussian Naive Bayes': {},
    'Multinomial Naive Bayes': {'alpha': [0.5, 1.0, 1.5, 2.0]},
    'Bernoulli Naive Bayes': {'alpha': [0.5, 1.0, 1.5, 2.0], 'binarize': [0.0, 0.5, 1.0]}
}


# Models without hyperparameters
base_models = {
    'Gaussian Naive Bayes': GaussianNB(),
    'Multinomial Naive Bayes': MultinomialNB(),
    'Bernoulli Naive Bayes': BernoulliNB()
}
# Hyperparameter tuning and evaluation
for name, model in base_models.items():
    if name == 'Gaussian Naive Bayes':
        # Gaussian Naive Bayes does not have specific parameters to tune with GridSearchCV
        model.fit(X_train_count.toarray(), y_train)
        y_pred = model.predict(X_test_count.toarray())
    else:
        grid_search = GridSearchCV(model, param_grids[name], cv=5, scoring='accuracy')
        grid_search.fit(X_train_count, y_train)
        model = grid_search.best_estimator_
        y_pred = model.predict(X_test_count)

    accuracy = accuracy_score(y_test, y_pred)
    report = classification_report(y_test, y_pred)
    print(f"=== {name} ===")
    if name != 'Gaussian Naive Bayes':
        print("Best Parameters:", grid_search.best_params_)
    print("Accuracy:", accuracy)
    print(report)
