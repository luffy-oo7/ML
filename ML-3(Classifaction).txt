import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/Admission_Predict.csv')
df.head()

df = df.drop('Serial No.',axis=1)
df.head()

df['Chance of Admit ']=[1 if each>0.75 else 0 for each in df['Chance of Admit ']]
df.head()

x=df[['GRE Score','TOEFL Score','University Rating','SOP','LOR ','CGPA','Research']]
y=df['Chance of Admit ']
y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=1)
print(f"Size of splitted data")
print(f"x_train {x_train.shape}")
print(f"y_train {y_train.shape}")
print(f"y_train {x_test.shape}")
print(f"y_test {y_test.shape}")

from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LogisticRegression

model_dt=DecisionTreeRegressor(random_state=1)
model_rf=RandomForestRegressor(random_state=1)
model_lr=LogisticRegression(random_state=1,max_iter=1000)

model_dt.fit(x_train,y_train)
model_rf.fit(x_train,y_train)
model_lr.fit(x_train,y_train)

y_pred_dt=model_dt.predict(x_test)
y_pred_rf=model_rf.predict(x_test)
y_pred_lr=model_lr.predict(x_test)

from sklearn.metrics import confusion_matrix,ConfusionMatrixDisplay,accuracy_score,classification_report

ConfusionMatrixDisplay.from_predictions(y_test,y_pred_dt)
plt.title('Decision Tree')
plt.show()
print(f"Accuracy of Decision Tree is {accuracy_score(y_test,y_pred_dt)}")
print(classification_report(y_test,y_pred_dt))

ConfusionMatrixDisplay.from_predictions(y_test,y_pred_lr)
plt.title('Logistic Regression')
plt.show()
print(f"Accuracy of Decision Tree is {accuracy_score(y_test,y_pred_lr)}")
print(classification_report(y_test,y_pred_lr))

y_pred_rf = [1 if each > 0.75 else 0 for each in y_pred_rf]
ConfusionMatrixDisplay.from_predictions(y_test,y_pred_rf,xticks_rotation='vertical')
plt.title('Random Forest')
plt.show()
print(f" Accuracy is {accuracy_score(y_test,y_pred_rf)}")
print(classification_report(y_test,y_pred_rf))

corr = df.corr()
plt.style.use('ggplot')
mask = np.triu(np.ones_like(corr, dtype=bool))
plt.figure(figsize=(8, 8))
sns.heatmap(corr, cmap='coolwarm', mask=mask, annot=True, fmt=".2f", linewidths=0.5)
plt.show()
